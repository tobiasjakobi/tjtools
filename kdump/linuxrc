#!/bin/sh

# shellcheck source=initrd.defaults
. /etc/initrd.defaults
# shellcheck source=initrd.scripts
. /etc/initrd.scripts

# Basic /dev content, we need it as fast as possible.
[ ! -e /dev/console ]  && mknod /dev/console c 5 1
[ ! -e /dev/null ]     && mknod /dev/null c 1 3
[ ! -e /dev/random ]   && mknod /dev/random c 1 8
[ ! -e /dev/tty ]      && mknod /dev/tty c 5 0
[ ! -e /dev/tty0 ]     && mknod /dev/tty0 c 4 0
[ ! -e /dev/tty1 ]     && mknod /dev/tty1 c 4 1
[ ! -e /dev/ttyS0 ]    && mknod /dev/ttyS0 c 4 64
[ ! -e /dev/ttyS1 ]    && mknod /dev/ttyS1 c 4 65
[ ! -e /dev/urandom ]  && mknod /dev/urandom c 1 9
[ ! -e /dev/zero ]     && mknod /dev/zero c 1 5

# Take control
CONSOLE="/dev/$(get_active_console)"
exec 0<>${CONSOLE} 1<>${CONSOLE} 2<>${CONSOLE}

if [ "$$" != '1' ]
then
	echo '/linuxrc has to be run as the init process as the one'
	echo 'with a PID of 1. Try adding init="/linuxrc" to the'
	echo 'kernel command line or running "exec /linuxrc".'
	exit 1
fi

mount -t proc -o noexec,nosuid,nodev proc /proc >/dev/null 2>&1
mount -o remount,rw / >/dev/null 2>&1
mount -t tmpfs -o rw,nosuid,nodev,relatime,mode=755 none /run 2>&1

if [ ! -d /run/initramfs ]
then
	mkdir -p /run/initramfs
	chmod 0750 /run/initramfs
fi

if [ ! -s /etc/ld.so.cache ]
then
	# Looks like we were unable to run ldconfig during initramfs generation
	hash ldconfig >/dev/null 2>&1 && run ldconfig
fi

# Set up symlinks
run busybox --install -s

# Handle kernel command-line parameters
CMDLINE=$(cat /proc/cmdline 2>/dev/null)
for x in ${CMDLINE}
do
	case "${x}" in
		quiet|quiet_genkernel)
			QUIET=1
		;;
		# Debug Options
		debug)
			run touch "${GK_DEBUGMODE_STATEFILE}"
		;;
		gk.bootfont.disabled=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				GK_BOOTFONT_DISABLED=1
			fi
			unset tmp_disabled
		;;
		gk.emergency=*)
			tmp_action=${x#*=}
			case "${tmp_action}" in
				reboot)
					GK_EMERGENCY_ACTION="reboot -f"
					;;
				poweroff)
					GK_EMERGENCY_ACTION="poweroff -f"
					;;
				halt)
					GK_EMERGENCY_ACTION="halt -f"
					;;
				*)
					warn_msg "'${x}' is an unsupported emergency action -- ignored!"
					;;
			esac
			unset tmp_action
		;;
		gk.hw.load-all=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				GK_HW_LOAD_ALL_MODULES=1
			fi
			unset tmp_disabled
		;;
		gk.hw.use-modules_load=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				GK_HW_USE_MODULES_LOAD=1
			fi
			unset tmp_disabled
		;;
		gk.log.disabled=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				[ -f "${GK_INIT_LOG}" ] && rm "${GK_INIT_LOG}"
				GK_INIT_LOG=
				touch "${GK_INIT_LOG_DISABLED}"
			fi
			unset tmp_disabled
		;;
		gk.udev.debug=*)
			tmp_enabled=${x#*=}
			if is_true "${tmp_enabled}"
			then
				GK_UDEV_DEBUG=1
			fi
			unset tmp_enabled
		;;
		gk.udev.timeout=*)
			tmp_timeout=${x#*=}
			if is_int "${tmp_timeout}"
			then
				GK_UDEV_TIMEOUT=${tmp_timeout}
			else
				warn_msg "'${x}' does not look like a valid time (second) value -- ignored!"
			fi
			unset tmp_timeout
		;;
		gk.userinteraction.disabled=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				touch "${GK_USERINTERACTION_DISABLED_STATEFILE}"
			fi
			unset tmp_disabled
		;;
		gk.preserverun.disabled=*)
			tmp_disabled=${x#*=}
			if is_true "${tmp_disabled}"
			then
				warn_msg "gk.preserverun.disabled is set; /run will not be moved to newroot!"
				GK_PRESERVE_RUN=0
			fi
			unset tmp_disabled
		;;
		gk.prompt.timeout=*)
			tmp_timeout=${x#*=}
			if is_int "${tmp_timeout}"
			then
				GK_PROMPT_TIMEOUT=${tmp_timeout}
			else
				warn_msg "'${x}' does not look like a valid time (second) value -- ignored!"
			fi
			unset tmp_timeout
		;;
		keymap=*)
			keymap=${x#*=}
		;;
		locale=*)
			locale=${x#*=}
		;;
		verify)
			VERIFY=1
		;;
	esac
done

if ! is_quiet
then
	# Prevent superfluous printks from being printed to the console
	echo ${GK_CONSOLE_LOGLEVEL} > /proc/sys/kernel/printk
fi

good_msg "${GK_META_VERSION} (${GK_META_BUILD_DATE}). Linux kernel ${KV}"

if [ "${GK_BOOTFONT_DISABLED}" = '0' -a -e /lib/console/font ]
then
	if echo "$(get_active_console)" | grep -qF ttyS
	then
		warn_msg "Active console is ${console}; Not loading embedded boot font ..."
	elif hash setfont >/dev/null 2>&1
	then
		run setfont /lib/console/font -C ${CONSOLE} 2>&1
	fi
fi

cmdline_hwopts

# Mount devfs
mount_devfs

# Mount sysfs
mount_sysfs

if [ -e /proc/sys/kernel/hotplug ]
then
	log_msg "COMMAND: 'echo "" > /proc/sys/kernel/hotplug'"
	echo "" > /proc/sys/kernel/hotplug
fi

# Run debug shell if requested
run_debug_shell "before starting udevd"

# Initialize udev
if [ ! -f "/etc/udev/hwdb.bin" ]
then
	good_msg 'Generating /etc/udev/hwdb.bin ...'
	run udevadm hwdb --update \
		|| bad_msg 'Failed to generate /etc/udev/hwdb.bin!'
fi

good_msg 'Activating udev ...'

udevd_cmd="run udevd --resolve-names=never"
if [ "${GK_UDEV_DEBUG}" = '1' ]
then
	udevd_cmd="${udevd_cmd} --debug > ${GK_UDEV_LOG} 2>&1 &"
else
	udevd_cmd="${udevd_cmd} --daemon"
fi
eval "${udevd_cmd}"
if [ $? -eq 0 ]
then
	run udevadm trigger --action=add
	udevsettle
else
	bad_msg "udevd failed to run"
fi

cd /

setup_keymap
start_network

# Re-run to ensure $NEWROOT/etc/initramfs.mounts was processed at least once
process_initramfs_mounts

# Use the audioserver to store the dumps.
kdump_receiver_addr="192.168.0.101"
kdump_receiver_port=7392

kdump_receiver_pong=0

# Make sure that the receiver is online.
while true
do
	if ping -q -c 1 -w 4 ${kdump_receiver_addr}
	then
		kdump_receiver_pong=$((kdump_receiver_pong+1))
	else
		kdump_receiver_pong=0
	fi

	if [ ${kdump_receiver_pong} -eq 5 ]
	then
		break
	fi

	sleep 1s
done

makedumpfile -c -d 31 -F /proc/vmcore 2> /run/makedumpfile.log | nc -w 5 ${kdump_receiver_addr} ${kdump_receiver_port}

cleanup

udevsettle
run udevadm control --exit
if pgrep udevd >/dev/null 2>&1
then
	warn_msg "udevd is still running -- Trying to kill it ..."
	run pkill -9 udevd >/dev/null 2>&1
fi

# Run debug shell if requested
run_debug_shell "before switch_root"

if [ "${GK_PRESERVE_RUN}" = '0' ]
then
	GK_INIT_LOG=
	run umount /run
fi

if ! is_quiet && [[ "${CONSOLE_LOGLEVEL}" != "${GK_CONSOLE_LOGLEVEL}" ]]
then
	good_msg "Restoring console log level (${CONSOLE_LOGLEVEL}) ..."
	echo ${CONSOLE_LOGLEVEL} > /proc/sys/kernel/printk \
		&& log_msg "COMMAND: 'echo \"${CONSOLE_LOGLEVEL}\" > /proc/sys/kernel/printk'"
fi

${GK_EMERGENCY_ACTION} || exit 1

read
